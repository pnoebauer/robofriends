{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/robofriends/src/containers/App.js\";\n//React syntax rules\n//https://medium.com/@leannezhang/curly-braces-versus-parenthesis-in-reactjs-4d3ffd33128f\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'; //below are needed to connect with redux (those are the files that can access the redux state)\n\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n  //store = searchRobots (as reducer)\n  return {\n    searchField: state.searchRobots.searchField\n  };\n}; //dispatch is what triggers the action\n\n\nconst mapDispatchToProps = dispatch => {\n  // onSearchChange is a prop, so any name can be used; use this name to be consistent with function used below\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\n  };\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    this.state = {\n      robots: [],\n      searchfield: ''\n    };\n  }\n\n  componentDidMount() {\n    // console.log(this.props.store);\n    // console.log(this.props.store.getState());\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => {\n      this.setState({\n        robots: users\n      });\n    });\n  }\n\n  render() {\n    const {\n      robots,\n      searchfield\n    } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return !robots.length ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"RoboFriends\"), React.createElement(SearchBox, {\n      searchChange: this.onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      robots: filteredRobots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })));\n  }\n\n} // export default App;\n//App connect to redux - subscribe to any changes in the redux store\n//connect() is a higher order function - a function that returns a function (it runs App)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","setSearchField","mapStateToProps","state","searchField","searchRobots","mapDispatchToProps","dispatch","onSearchChange","event","target","value","App","constructor","setState","searchfield","robots","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP,C,CAEA;;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B;AACA,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD;AAD3B,GAAP;AAGD,CALD,C,CAOA;;;AACA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACvC;AACA,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACN,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAD9B,GAAP;AAGD,CALD;;AAOA,MAAMC,GAAN,SAAkBhB,SAAlB,CACA;AACEiB,EAAAA,WAAW,GAAG;AACZ;;AADY,SAgBdL,cAhBc,GAgBIC,KAAD,IAAW;AAC1B,WAAKK,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAEN,KAAK,CAACC,MAAN,CAAaC;AAA5B,OAAd;AACD,KAlBa;;AAEZ,SAAKR,KAAL,GAAa;AACXa,MAAAA,MAAM,EAAE,EADG;AAEXD,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADnB,EAEGF,IAFH,CAEQG,KAAK,IAAI;AAAC,WAAKR,QAAL,CAAc;AAAEE,QAAAA,MAAM,EAAEM;AAAV,OAAd;AAAgC,KAFlD;AAGD;;AAMDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,MAAF;AAAUD,MAAAA;AAAV,QAA0B,KAAKZ,KAArC;AACA,UAAMqB,cAAc,GAAGR,MAAM,CAACS,MAAP,CAAcC,KAAK,IAAG;AAC3C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCd,WAAW,CAACa,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAGA,WAAO,CAACZ,MAAM,CAACc,MAAR,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK,GAGH;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAE,KAAKtB,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEgB,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CAHJ;AAWD;;AArCH,C,CAwCA;AAEA;AACA;;;AACA,eAAe3B,OAAO,CAACK,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CM,GAA7C,CAAf","sourcesContent":["//React syntax rules\n//https://medium.com/@leannezhang/curly-braces-versus-parenthesis-in-reactjs-4d3ffd33128f\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n//below are needed to connect with redux (those are the files that can access the redux state)\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n  //store = searchRobots (as reducer)\n  return {\n    searchField: state.searchRobots.searchField\n  }\n}\n\n//dispatch is what triggers the action\nconst mapDispatchToProps = (dispatch) => {\n  // onSearchChange is a prop, so any name can be used; use this name to be consistent with function used below\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\n\nclass App extends Component \n{\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    // console.log(this.props.store);\n    // console.log(this.props.store.getState());\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// export default App;\n\n//App connect to redux - subscribe to any changes in the redux store\n//connect() is a higher order function - a function that returns a function (it runs App)\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}