{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/robofriends/src/containers/App.js\";\n//React syntax rules\n//https://medium.com/@leannezhang/curly-braces-versus-parenthesis-in-reactjs-4d3ffd33128f\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'; //below are needed to connect with redux (those are the files that can access the redux state)\n\nimport { setSearchField } from '../actions'; //store = searchRobots (as reducer)\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField // searchField: state.searchRobots.searchField\n\n  };\n}; //dispatch is what triggers the action\n\n\nconst mapDispatchToProps = dispatch => {\n  // onSearchChange is a prop, so any name can be used; use this name to be consistent with function used below\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\n  };\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [] // searchfield: '' //#connect(): removed as redux takes care of it --> mapStateToProps\n\n    };\n  }\n\n  componentDidMount() {\n    // console.log(this.props.store);\n    // console.log(this.props.store.getState());\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => {\n      this.setState({\n        robots: users\n      });\n    });\n  } //#connect(): removed as redux takes care of it --> mapDispatchToProps\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n\n  render() {\n    // const { robots, searchfield } = this.state; //#connect(): removed searchfield as it is coming down as props\n    const {\n      robots\n    } = this.state;\n    const {\n      searchField,\n      onSearchChange\n    } = this.props; //#connect(): added - it's now a prop\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"RoboFriends\"), React.createElement(SearchBox, {\n      searchChange: onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      robots: filteredRobots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })));\n  }\n\n} // export default App;\n//App connect to redux - subscribe to any changes in the redux store\n//connect() is a higher order function - a function that returns a function (it runs App)\n//connect runs with below 2 parameters and then gives those props to the App\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","setSearchField","mapStateToProps","state","searchField","mapDispatchToProps","dispatch","onSearchChange","event","target","value","App","constructor","robots","componentDidMount","fetch","then","response","json","users","setState","render","props","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP,C,CAEA;;AACA,SAASC,cAAT,QAA+B,YAA/B,C,CAEA;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADd,CAEL;;AAFK,GAAP;AAID,CALD,C,CAOA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC;AACA,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACL,cAAc,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAD9B,GAAP;AAGD,CALD;;AAOA,MAAMC,GAAN,SAAkBf,SAAlB,CACA;AACEgB,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKT,KAAL,GAAa;AACXU,MAAAA,MAAM,EAAE,EADG,CAEX;;AAFW,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADnB,EAEGF,IAFH,CAEQG,KAAK,IAAI;AAAC,WAAKC,QAAL,CAAc;AAAEP,QAAAA,MAAM,EAAEM;AAAV,OAAd;AAAgC,KAFlD;AAGD,GAfH,CAiBE;AACA;AACA;AACA;;;AAEAE,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAER,MAAAA;AAAF,QAAa,KAAKV,KAAxB;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeG,MAAAA;AAAf,QAAkC,KAAKe,KAA7C,CAHO,CAG6C;;AACpD,UAAMC,cAAc,GAAGV,MAAM,CAACW,MAAP,CAAcC,KAAK,IAAG;AAC3C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCxB,WAAW,CAACuB,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAGA,WAAO,CAACd,MAAM,CAACgB,MAAR,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK,GAGH;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAGE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEtB,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEgB,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CAHJ;AAYD;;AAzCH,C,CA4CA;AAEA;AACA;AACA;;;AACA,eAAe1B,OAAO,CAACK,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CM,GAA7C,CAAf","sourcesContent":["//React syntax rules\n//https://medium.com/@leannezhang/curly-braces-versus-parenthesis-in-reactjs-4d3ffd33128f\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n//below are needed to connect with redux (those are the files that can access the redux state)\nimport { setSearchField } from '../actions';\n\n//store = searchRobots (as reducer)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchField\n    // searchField: state.searchRobots.searchField\n  }\n}\n\n//dispatch is what triggers the action\nconst mapDispatchToProps = (dispatch) => {\n  // onSearchChange is a prop, so any name can be used; use this name to be consistent with function used below\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\n\nclass App extends Component \n{\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      // searchfield: '' //#connect(): removed as redux takes care of it --> mapStateToProps\n    }\n  }\n\n  componentDidMount() {\n    // console.log(this.props.store);\n    // console.log(this.props.store.getState());\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  //#connect(): removed as redux takes care of it --> mapDispatchToProps\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n  render() {\n    // const { robots, searchfield } = this.state; //#connect(): removed searchfield as it is coming down as props\n    const { robots } = this.state;\n    const { searchField, onSearchChange } = this.props; //#connect(): added - it's now a prop\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          {/* <SearchBox searchChange={this.onSearchChange}/> //#connect(): removed as it is now a props */}\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// export default App;\n\n//App connect to redux - subscribe to any changes in the redux store\n//connect() is a higher order function - a function that returns a function (it runs App)\n//connect runs with below 2 parameters and then gives those props to the App\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}