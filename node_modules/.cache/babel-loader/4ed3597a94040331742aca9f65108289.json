{"ast":null,"code":"//#Async Action: added\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAIL } from './constants'; //#Async Action: edited, now we have states for two different reducers\n\nconst initialStateSearch = {\n  searchField: ''\n}; //create reducer function\n//action: search robots based on the searchField \n\nexport const searchRobots = (state = initialStateSearch, action = {}) => //give it a default state in case parameters are empty\n{\n  // console.log(action.type);\n  //if we receive actions that are related to search robots, the state is modified\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {\n        searchField: action.payload\n      });\n\n    default:\n      return state;\n  }\n}; //#Async Action: added\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}; //#Async Action: reducer function #2 added\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      });\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n\n    case REQUEST_ROBOTS_FAIL:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/robofriends/src/reducers.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","initialStateSearch","searchField","searchRobots","state","action","type","Object","assign","payload","initialStateRobots","isPending","robots","error","requestRobots"],"mappings":"AAAA;AACA,SAASA,mBAAT,EACEC,sBADF,EAEEC,sBAFF,EAGEC,mBAHF,QAIM,aAJN,C,CAMA;;AACA,MAAMC,kBAAkB,GACxB;AACCC,EAAAA,WAAW,EAAE;AADd,CADA,C,CAKA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAACH,kBAAP,EAA2BI,MAAM,GAAC,EAAlC,KAAyC;AACrE;AAAE;AACD;AACA,UAAOA,MAAM,CAACC,IAAd;AAEC,SAAKT,mBAAL;AACC,aAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACF,QAAAA,WAAW,EAAEG,MAAM,CAACI;AAArB,OAAzB,CAAP;;AACD;AACC,aAAOL,KAAP;AALF;AAOA,CAVM,C,CAYP;;AACA,MAAMM,kBAAkB,GACxB;AACCC,EAAAA,SAAS,EAAE,KADZ;AAECC,EAAAA,MAAM,EAAE,EAFT;AAGCC,EAAAA,KAAK,EAAE;AAHR,CADA,C,CAOA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACV,KAAK,GAACM,kBAAP,EAA2BL,MAAM,GAAC,EAAlC,KAC7B;AACC,UAAOA,MAAM,CAACC,IAAd;AAEC,SAAKR,sBAAL;AACC,aAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACO,QAAAA,SAAS,EAAE;AAAZ,OAAzB,CAAP;;AAED,SAAKZ,sBAAL;AACC,aAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACQ,QAAAA,MAAM,EAAEP,MAAM,CAACI,OAAhB;AAAyBE,QAAAA,SAAS,EAAE;AAApC,OAAzB,CAAP;;AAED,SAAKX,mBAAL;AACC,aAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACS,QAAAA,KAAK,EAAER,MAAM,CAACI,OAAf;AAAwBE,QAAAA,SAAS,EAAE;AAAnC,OAAzB,CAAP;;AACD;AACC,aAAOP,KAAP;AAXF;AAaA,CAfM","sourcesContent":["//#Async Action: added\nimport { CHANGE_SEARCH_FIELD, \n\t\tREQUEST_ROBOTS_PENDING, \n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAIL } \n\tfrom './constants';\n\n//#Async Action: edited, now we have states for two different reducers\nconst initialStateSearch = \n{\n\tsearchField: '',\n}\n\n//create reducer function\n//action: search robots based on the searchField \nexport const searchRobots = (state=initialStateSearch, action={}) => //give it a default state in case parameters are empty\n{\t// console.log(action.type);\n\t//if we receive actions that are related to search robots, the state is modified\n\tswitch(action.type)\n\t{\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n//#Async Action: added\nconst initialStateRobots = \n{\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\n//#Async Action: reducer function #2 added\nexport const requestRobots = (state=initialStateRobots, action={}) => \n{\n\tswitch(action.type)\n\t{\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true});\n\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\n\n\t\tcase REQUEST_ROBOTS_FAIL:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n"]},"metadata":{},"sourceType":"module"}