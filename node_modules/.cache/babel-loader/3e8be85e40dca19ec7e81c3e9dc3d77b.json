{"ast":null,"code":"//#Async Action: added\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAIL } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text //payload = action to take by redux\n\n}); //#Async Action: added\n// export const requestRobots = (dispatch) => {\n//changed because of App.js mapDispatchToProps\n//higher order function - used because of thunk: Async Action - 23:50\n//thunk sees function returned by the action and allows it to execute actions based on code - basically waits for response\n\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  }); //asynchronous\n\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAIL,\n    payload: error\n  })); //in case of error\n};","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA;AACA,SAASA,mBAAT,EACEC,sBADF,EAEEC,sBAFF,EAGEC,mBAHF,QAIM,aAJN;AAMA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACtCC,EAAAA,IAAI,EAAEN,mBADgC;AAEtCO,EAAAA,OAAO,EAAEF,IAF6B,CAExB;;AAFwB,CAAX,CAAvB,C,CAKP;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMG,aAAa,GAAG,MAAMC,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAAE;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAF,CAAR,CAD+C,CAE/C;;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACMC,IADN,CACWC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADvB,EAEMF,IAFN,CAEWG,IAAI,IAAIL,QAAQ,CAAE;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEO;AAAzC,GAAF,CAF3B,EAGMC,KAHN,CAGYC,KAAK,IAAIP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,mBAAR;AAA6BI,IAAAA,OAAO,EAAES;AAAtC,GAAD,CAH7B,EAH+C,CAMgC;AAC/E,CAPM","sourcesContent":["//#Async Action: added\nimport { CHANGE_SEARCH_FIELD, \n\t\tREQUEST_ROBOTS_PENDING, \n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAIL } \n\tfrom './constants';\n\nexport const setSearchField = (text) => ({\n\t\t\ttype: CHANGE_SEARCH_FIELD, \n\t\t\tpayload: text\t//payload = action to take by redux\n\t\t});\n\n//#Async Action: added\n// export const requestRobots = (dispatch) => {\n\n//changed because of App.js mapDispatchToProps\n//higher order function - used because of thunk: Async Action - 23:50\n//thunk sees function returned by the action and allows it to execute actions based on code - basically waits for response\nexport const requestRobots = () =>(dispatch) => {\n\tdispatch( { type: REQUEST_ROBOTS_PENDING });\n\t//asynchronous\n\tfetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch( { type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error }))\t\t//in case of error\n};"]},"metadata":{},"sourceType":"module"}