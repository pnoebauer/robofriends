{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/robofriends/src/containers/App.js\";\n//React syntax rules\n//https://medium.com/@leannezhang/curly-braces-versus-parenthesis-in-reactjs-4d3ffd33128f\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'; //below are needed to connect with redux (those are the files that can access the redux state)\n// import { setSearchField } from '../actions';\n\nimport { setSearchField, requestRobots } from '../actions'; //#Async Actions\n//store = searchRobots (as reducer)\n\nconst mapStateToProps = state => {\n  return {\n    // searchField: state.searchField\n    //#Async Actions\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n}; //dispatch is what triggers the action\n\n\nconst mapDispatchToProps = dispatch => {\n  // onSearchChange is a prop, so any name can be used; use this name to be consistent with function used below\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    //#Async Actions; below onRequestRobots prop to return a function\n    onRequestRobots: () => dispatch(requestRobots()) //equal to: onRequestRobots: () => requestRobots(dispatch); as a fct is returned action can be changed, see actions.js\n\n  };\n};\n\nclass App extends Component {\n  //#Async Action: constructor not needed anymore\n  // constructor() \n  // {\n  //   super()\n  //   this.state = \n  //   {\n  //     robots: [],\n  //     // searchfield: '' //#connect(): removed as redux takes care of it --> mapStateToProps\n  //   }\n  // }\n  componentDidMount() {\n    // console.log(this.props.store);\n    // console.log(this.props.store.getState());\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response=> response.json())\n    //   .then(users => {this.setState({ robots: users})});\n    //#Async Actions - fetch not needed anymore as it is passed through props\n    this.props.onRequestRobots;\n  } //#connect(): removed as redux takes care of it --> mapDispatchToProps\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n\n  render() {\n    // const { robots, searchfield } = this.state; //#connect(): removed searchfield as it is coming down as props\n    const {\n      robots\n    } = this.state;\n    const {\n      searchField,\n      onSearchChange\n    } = this.props; //#connect(): added - it's now a prop\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"RoboFriends\"), React.createElement(SearchBox, {\n      searchChange: onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      robots: filteredRobots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n} // export default App;\n//App connect to redux - subscribe to any changes in the redux store\n//connect() is a higher order function - a function that returns a function (it runs App)\n//connect runs with below 2 parameters and then gives those props to the App\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","error","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","componentDidMount","props","render","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP,C,CAEA;AACA;;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,YAA9C,C,CAA4D;AAE5D;;AACA,MAAMC,eAAe,GAAIC,KAAD,IACxB;AACE,SAAO;AACL;AACA;AACAC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAH3B;AAILE,IAAAA,MAAM,EAAEH,KAAK,CAACF,aAAN,CAAoBK,MAJvB;AAKLC,IAAAA,SAAS,EAAEJ,KAAK,CAACF,aAAN,CAAoBM,SAL1B;AAMLC,IAAAA,KAAK,EAAEL,KAAK,CAACF,aAAN,CAAoBO;AANtB,GAAP;AAQD,CAVD,C,CAYA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAC3B;AACE;AACA,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACV,cAAc,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAEL;AACAC,IAAAA,eAAe,EAAE,MAAML,QAAQ,CAACT,aAAa,EAAd,CAH1B,CAG4C;;AAH5C,GAAP;AAKD,CARD;;AAUA,MAAMe,GAAN,SAAkBrB,SAAlB,CACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAsB,EAAAA,iBAAiB,GACjB;AACE;AACA;AACA;AACA;AACA;AACA;AACA,SAAKC,KAAL,CAAWH,eAAX;AACD,GArBH,CAuBE;AACA;AACA;AACA;;;AAEAI,EAAAA,MAAM,GACN;AACE;AACA,UAAM;AAAEb,MAAAA;AAAF,QAAa,KAAKH,KAAxB;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeO,MAAAA;AAAf,QAAkC,KAAKO,KAA7C,CAHF,CAGsD;;AACpD,UAAME,cAAc,GAAGd,MAAM,CAACe,MAAP,CAAcC,KAAK,IAC1C;AACE,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCrB,WAAW,CAACoB,WAAZ,EAAlC,CAAP;AACD,KAHsB,CAAvB;AAIA,WAAO,CAAClB,MAAM,CAACoB,MAAR,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK,GAGH;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAGE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEf,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAES,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CAHJ;AAYD;;AAjDH,C,CAoDA;AAEA;AACA;AACA;;;AACA,eAAexB,OAAO,CAACM,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["//React syntax rules\n//https://medium.com/@leannezhang/curly-braces-versus-parenthesis-in-reactjs-4d3ffd33128f\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n//below are needed to connect with redux (those are the files that can access the redux state)\n// import { setSearchField } from '../actions';\nimport { setSearchField, requestRobots } from '../actions'; //#Async Actions\n\n//store = searchRobots (as reducer)\nconst mapStateToProps = (state) => \n{\n  return {\n    // searchField: state.searchField\n    //#Async Actions\n    searchField: state.searchRobots.searchField, \n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\n//dispatch is what triggers the action\nconst mapDispatchToProps = (dispatch) => \n{\n  // onSearchChange is a prop, so any name can be used; use this name to be consistent with function used below\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    //#Async Actions; below onRequestRobots prop to return a function\n    onRequestRobots: () => dispatch(requestRobots()) //equal to: onRequestRobots: () => requestRobots(dispatch); as a fct is returned action can be changed, see actions.js\n  }\n}\n\nclass App extends Component \n{\n  //#Async Action: constructor not needed anymore\n  // constructor() \n  // {\n  //   super()\n  //   this.state = \n  //   {\n  //     robots: [],\n  //     // searchfield: '' //#connect(): removed as redux takes care of it --> mapStateToProps\n  //   }\n  // }\n\n  componentDidMount() \n  {\n    // console.log(this.props.store);\n    // console.log(this.props.store.getState());\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response=> response.json())\n    //   .then(users => {this.setState({ robots: users})});\n    //#Async Actions - fetch not needed anymore as it is passed through props\n    this.props.onRequestRobots;\n  }\n\n  //#connect(): removed as redux takes care of it --> mapDispatchToProps\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n  render() \n  {\n    // const { robots, searchfield } = this.state; //#connect(): removed searchfield as it is coming down as props\n    const { robots } = this.state;\n    const { searchField, onSearchChange } = this.props; //#connect(): added - it's now a prop\n    const filteredRobots = robots.filter(robot =>\n    {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          {/* <SearchBox searchChange={this.onSearchChange}/> //#connect(): removed as it is now a props */}\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// export default App;\n\n//App connect to redux - subscribe to any changes in the redux store\n//connect() is a higher order function - a function that returns a function (it runs App)\n//connect runs with below 2 parameters and then gives those props to the App\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}