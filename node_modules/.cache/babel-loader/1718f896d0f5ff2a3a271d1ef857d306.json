{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/robofriends/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'; // import { createStore } from 'redux';\n// import { createStore, applyMiddleware } from 'redux'; //#Middleware: added\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; //#Async Action: added\n\nimport { createLogger } from 'redux-logger'; //#Middleware: added\n//thunk: checks if any actions return a function instead of an object (setSearchField returns an object, searchRobots a function)\n\nimport thunk from 'redux-thunk'; //#Async Action: added\n\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker'; // import { searchRobots } from './reducers'; //#Middleware: added\n\nimport { searchRobots, requestRobots } from './reducers'; //#Async Action\n\nimport 'tachyons'; //Redux:\n//Action --> Reducer --> Store (big JS object that describes state of app) --> Make changes (React)\n//with redux all states can be removed; will be passed down from the store as a prop to <App>\n\nconst logger = createLogger(); //#Middleware: added\n//create store\n// const store = createStore(rootReducer); //combine all reducers to rootReducer; here only one: searchRobots\n// const store = createStore(searchRobots); \n//#Middleware: below will automatically log prev state, action, next state\n// const store = createStore(searchRobots, applyMiddleware(logger)); //#Middleware: added\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n}); //#Async Action: added\n// const store = createStore(searchRobots, applyMiddleware(thunk,logger)); //#Async Action: added\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger)); //#Async Action\n// ReactDOM.render(<App />, document.getElementById('root'));\n// pass store as props object\n// ReactDOM.render(<App store={store}/>, document.getElementById('root'));\n//do not pass store to all elements down the tree but only App --> use Provider\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n})), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/robofriends/src/index.js"],"names":["React","ReactDOM","Provider","createStore","applyMiddleware","combineReducers","createLogger","thunk","App","registerServiceWorker","searchRobots","requestRobots","logger","rootReducer","store","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;AACA;;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CAAuE;;AAEvE,SAASC,YAAT,QAA6B,cAA7B,C,CAA6C;AAC7C;;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAAiC;;AAGjC,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC,C,CACA;;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,YAA5C,C,CAA0D;;AAC1D,OAAO,UAAP,C,CAEA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAGN,YAAY,EAA3B,C,CAA8B;AAE9B;AACA;AACA;AAEA;AACA;;AAEA,MAAMO,WAAW,GAAGR,eAAe,CAAC;AAACK,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAAD,CAAnC,C,CAAoE;AACpE;;AACA,MAAMG,KAAK,GAAGX,WAAW,CAACU,WAAD,EAAcT,eAAe,CAACG,KAAD,EAAOK,MAAP,CAA7B,CAAzB,C,CAAuE;AAGvE;AACA;AACA;AAEA;;AACAX,QAAQ,CAACc,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACX,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADW,CAAhB,EAEiBE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFjB;AAIAR,qBAAqB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { createStore } from 'redux';\n// import { createStore, applyMiddleware } from 'redux'; //#Middleware: added\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; //#Async Action: added\n\nimport { createLogger } from 'redux-logger'; //#Middleware: added\n//thunk: checks if any actions return a function instead of an object (setSearchField returns an object, searchRobots a function)\nimport thunk from 'redux-thunk'; //#Async Action: added\n\n\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\n// import { searchRobots } from './reducers'; //#Middleware: added\nimport { searchRobots, requestRobots } from './reducers'; //#Async Action\nimport 'tachyons';\n\n//Redux:\n//Action --> Reducer --> Store (big JS object that describes state of app) --> Make changes (React)\n//with redux all states can be removed; will be passed down from the store as a prop to <App>\n\nconst logger = createLogger();//#Middleware: added\n\n//create store\n// const store = createStore(rootReducer); //combine all reducers to rootReducer; here only one: searchRobots\n// const store = createStore(searchRobots); \n\n//#Middleware: below will automatically log prev state, action, next state\n// const store = createStore(searchRobots, applyMiddleware(logger)); //#Middleware: added\n\nconst rootReducer = combineReducers({searchRobots, requestRobots}); //#Async Action: added\n// const store = createStore(searchRobots, applyMiddleware(thunk,logger)); //#Async Action: added\nconst store = createStore(rootReducer, applyMiddleware(thunk,logger)); //#Async Action\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// pass store as props object\n// ReactDOM.render(<App store={store}/>, document.getElementById('root'));\n\n//do not pass store to all elements down the tree but only App --> use Provider\nReactDOM.render(<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>, document.getElementById('root'));\n\nregisterServiceWorker();\n"]},"metadata":{},"sourceType":"module"}